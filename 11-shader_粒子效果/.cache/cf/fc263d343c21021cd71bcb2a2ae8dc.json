{"id":"shader/basic/vertexShader.glsl","dependencies":[{"name":"H:\\share\\three.js全套系列课程\\代码\\11-shader_粒子效果\\package.json","includedInParent":true,"mtime":1647451843256}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nvarying vec2 vUv;\\n\\nattribute float imgIndex;\\nattribute float aScale;\\nvarying float vImgIndex;\\n\\nuniform float uTime;\\n\\nvarying vec3 vColor;\\nvoid main(){\\n    vec4 modelPosition = modelMatrix * vec4( position, 1.0 );\\n    \\n\\n    // 获取定点的角度\\n    float angle = atan(modelPosition.x,modelPosition.z);\\n    // 获取顶点到中心的距离\\n    float distanceToCenter = length(modelPosition.xz);\\n    // 根据顶点到中心的距离，设置旋转偏移度数\\n    float angleOffset = 1.0/distanceToCenter*uTime;\\n    // 目前旋转的度数\\n    angle+=angleOffset;\\n\\n    modelPosition.x = cos(angle)*distanceToCenter;\\n    modelPosition.z = sin(angle)*distanceToCenter;\\n\\n    vec4 viewPosition = viewMatrix*modelPosition;\\n    gl_Position =  projectionMatrix * viewPosition;\\n\\n    // 设置点的大小\\n    // gl_PointSize = 100.0;\\n    // 根据viewPosition的z坐标决定是否原理摄像机\\n    gl_PointSize =200.0/-viewPosition.z*aScale;\\n    vUv = uv;\\n    vImgIndex=imgIndex;\\n    vColor = color;\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"shader/basic/vertexShader.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"shader/basic/vertexShader.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"shader/basic/vertexShader.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"shader/basic/vertexShader.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"shader/basic/vertexShader.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":947},"source":"shader/basic/vertexShader.glsl","original":{"line":1,"column":0}}],"sources":{"shader/basic/vertexShader.glsl":"module.exports=\"#define GLSLIFY 1\\nvarying vec2 vUv;\\n\\nattribute float imgIndex;\\nattribute float aScale;\\nvarying float vImgIndex;\\n\\nuniform float uTime;\\n\\nvarying vec3 vColor;\\nvoid main(){\\n    vec4 modelPosition = modelMatrix * vec4( position, 1.0 );\\n    \\n\\n    // 获取定点的角度\\n    float angle = atan(modelPosition.x,modelPosition.z);\\n    // 获取顶点到中心的距离\\n    float distanceToCenter = length(modelPosition.xz);\\n    // 根据顶点到中心的距离，设置旋转偏移度数\\n    float angleOffset = 1.0/distanceToCenter*uTime;\\n    // 目前旋转的度数\\n    angle+=angleOffset;\\n\\n    modelPosition.x = cos(angle)*distanceToCenter;\\n    modelPosition.z = sin(angle)*distanceToCenter;\\n\\n    vec4 viewPosition = viewMatrix*modelPosition;\\n    gl_Position =  projectionMatrix * viewPosition;\\n\\n    // 设置点的大小\\n    // gl_PointSize = 100.0;\\n    // 根据viewPosition的z坐标决定是否原理摄像机\\n    gl_PointSize =200.0/-viewPosition.z*aScale;\\n    vUv = uv;\\n    vImgIndex=imgIndex;\\n    vColor = color;\\n}\";"},"lineCount":null}},"error":null,"hash":"5ae8a7346ee895927d3aba99aff105c9","cacheData":{"env":{}}}