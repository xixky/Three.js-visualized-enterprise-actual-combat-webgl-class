{"id":"shaders/water/vertex.glsl","dependencies":[{"name":"G:\\share\\three.js全套系列课程\\代码\\10-shader_水烟雾云\\package.json","includedInParent":true,"mtime":1646656551124}],"generated":{"js":"module.exports = \"precision lowp float;\\n#define GLSLIFY 1\\nuniform float uWaresFrequency;\\nuniform float uScale;\\nuniform float uNoiseFrequency;\\nuniform float uNoiseScale;\\nuniform float uXzScale;\\nuniform float uTime;\\nuniform float uXspeed;\\nuniform float uZspeed;\\nuniform float uNoiseSpeed;\\n\\n// 计算出的高度传递给片元着色器\\nvarying float vElevation;\\n\\n// 随机函数\\nfloat random (vec2 st) {\\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\\n}\\n\\n// 旋转函数\\nvec2 rotate(vec2 uv, float rotation, vec2 mid)\\n{\\n    return vec2(\\n      cos(rotation) * (uv.x - mid.x) + sin(rotation) * (uv.y - mid.y) + mid.x,\\n      cos(rotation) * (uv.y - mid.y) - sin(rotation) * (uv.x - mid.x) + mid.y\\n    );\\n}\\n\\n// 噪声函数\\nfloat noise (in vec2 _st) {\\n    vec2 i = floor(_st);\\n    vec2 f = fract(_st);\\n\\n    // Four corners in 2D of a tile\\n    float a = random(i);\\n    float b = random(i + vec2(1.0, 0.0));\\n    float c = random(i + vec2(0.0, 1.0));\\n    float d = random(i + vec2(1.0, 1.0));\\n\\n    vec2 u = f * f * (3.0 - 2.0 * f);\\n\\n    return mix(a, b, u.x) +\\n            (c - a)* u.y * (1.0 - u.x) +\\n            (d - b) * u.x * u.y;\\n}\\n\\n//\\tClassic Perlin 2D Noise \\n//\\tby Stefan Gustavson\\n//\\nvec4 permute(vec4 x)\\n{\\n    return mod(((x*34.0)+1.0)*x, 289.0);\\n}\\n\\nvec2 fade(vec2 t)\\n{\\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\n\\nfloat cnoise(vec2 P)\\n{\\n    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\\n    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\\n    Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\\n    vec4 ix = Pi.xzxz;\\n    vec4 iy = Pi.yyww;\\n    vec4 fx = Pf.xzxz;\\n    vec4 fy = Pf.yyww;\\n    vec4 i = permute(permute(ix) + iy);\\n    vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\\n    vec4 gy = abs(gx) - 0.5;\\n    vec4 tx = floor(gx + 0.5);\\n    gx = gx - tx;\\n    vec2 g00 = vec2(gx.x,gy.x);\\n    vec2 g10 = vec2(gx.y,gy.y);\\n    vec2 g01 = vec2(gx.z,gy.z);\\n    vec2 g11 = vec2(gx.w,gy.w);\\n    vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\\n    g00 *= norm.x;\\n    g01 *= norm.y;\\n    g10 *= norm.z;\\n    g11 *= norm.w;\\n    float n00 = dot(g00, vec2(fx.x, fy.x));\\n    float n10 = dot(g10, vec2(fx.y, fy.y));\\n    float n01 = dot(g01, vec2(fx.z, fy.z));\\n    float n11 = dot(g11, vec2(fx.w, fy.w));\\n    vec2 fade_xy = fade(Pf.xy);\\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\\n    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\\n    return 2.3 * n_xy;\\n}\\n\\nvoid main(){\\n    vec4 modelPosition = modelMatrix * vec4(position,1.0);\\n\\n    float elevation = sin(modelPosition.x*uWaresFrequency+uTime*uXspeed)*sin(modelPosition.z*uWaresFrequency*uXzScale+uTime*uZspeed);\\n\\n    elevation += -abs(cnoise(vec2(modelPosition.xz*uNoiseFrequency+uTime*uNoiseSpeed))) *uNoiseScale;\\n    \\n    vElevation = elevation;\\n    \\n    elevation *= uScale;\\n\\n    \\n\\n    modelPosition.y += elevation;\\n\\n    gl_Position = projectionMatrix * viewMatrix *modelPosition;\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"shaders/water/vertex.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"shaders/water/vertex.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"shaders/water/vertex.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"shaders/water/vertex.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"shaders/water/vertex.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":3029},"source":"shaders/water/vertex.glsl","original":{"line":1,"column":0}}],"sources":{"shaders/water/vertex.glsl":"module.exports=\"precision lowp float;\\n#define GLSLIFY 1\\nuniform float uWaresFrequency;\\nuniform float uScale;\\nuniform float uNoiseFrequency;\\nuniform float uNoiseScale;\\nuniform float uXzScale;\\nuniform float uTime;\\nuniform float uXspeed;\\nuniform float uZspeed;\\nuniform float uNoiseSpeed;\\n\\n// 计算出的高度传递给片元着色器\\nvarying float vElevation;\\n\\n// 随机函数\\nfloat random (vec2 st) {\\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\\n}\\n\\n// 旋转函数\\nvec2 rotate(vec2 uv, float rotation, vec2 mid)\\n{\\n    return vec2(\\n      cos(rotation) * (uv.x - mid.x) + sin(rotation) * (uv.y - mid.y) + mid.x,\\n      cos(rotation) * (uv.y - mid.y) - sin(rotation) * (uv.x - mid.x) + mid.y\\n    );\\n}\\n\\n// 噪声函数\\nfloat noise (in vec2 _st) {\\n    vec2 i = floor(_st);\\n    vec2 f = fract(_st);\\n\\n    // Four corners in 2D of a tile\\n    float a = random(i);\\n    float b = random(i + vec2(1.0, 0.0));\\n    float c = random(i + vec2(0.0, 1.0));\\n    float d = random(i + vec2(1.0, 1.0));\\n\\n    vec2 u = f * f * (3.0 - 2.0 * f);\\n\\n    return mix(a, b, u.x) +\\n            (c - a)* u.y * (1.0 - u.x) +\\n            (d - b) * u.x * u.y;\\n}\\n\\n//\\tClassic Perlin 2D Noise \\n//\\tby Stefan Gustavson\\n//\\nvec4 permute(vec4 x)\\n{\\n    return mod(((x*34.0)+1.0)*x, 289.0);\\n}\\n\\nvec2 fade(vec2 t)\\n{\\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\n\\nfloat cnoise(vec2 P)\\n{\\n    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\\n    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\\n    Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\\n    vec4 ix = Pi.xzxz;\\n    vec4 iy = Pi.yyww;\\n    vec4 fx = Pf.xzxz;\\n    vec4 fy = Pf.yyww;\\n    vec4 i = permute(permute(ix) + iy);\\n    vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\\n    vec4 gy = abs(gx) - 0.5;\\n    vec4 tx = floor(gx + 0.5);\\n    gx = gx - tx;\\n    vec2 g00 = vec2(gx.x,gy.x);\\n    vec2 g10 = vec2(gx.y,gy.y);\\n    vec2 g01 = vec2(gx.z,gy.z);\\n    vec2 g11 = vec2(gx.w,gy.w);\\n    vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\\n    g00 *= norm.x;\\n    g01 *= norm.y;\\n    g10 *= norm.z;\\n    g11 *= norm.w;\\n    float n00 = dot(g00, vec2(fx.x, fy.x));\\n    float n10 = dot(g10, vec2(fx.y, fy.y));\\n    float n01 = dot(g01, vec2(fx.z, fy.z));\\n    float n11 = dot(g11, vec2(fx.w, fy.w));\\n    vec2 fade_xy = fade(Pf.xy);\\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\\n    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\\n    return 2.3 * n_xy;\\n}\\n\\nvoid main(){\\n    vec4 modelPosition = modelMatrix * vec4(position,1.0);\\n\\n    float elevation = sin(modelPosition.x*uWaresFrequency+uTime*uXspeed)*sin(modelPosition.z*uWaresFrequency*uXzScale+uTime*uZspeed);\\n\\n    elevation += -abs(cnoise(vec2(modelPosition.xz*uNoiseFrequency+uTime*uNoiseSpeed))) *uNoiseScale;\\n    \\n    vElevation = elevation;\\n    \\n    elevation *= uScale;\\n\\n    \\n\\n    modelPosition.y += elevation;\\n\\n    gl_Position = projectionMatrix * viewMatrix *modelPosition;\\n}\";"},"lineCount":null}},"error":null,"hash":"3f24426179dccdaaea7b7bad424641fb","cacheData":{"env":{}}}